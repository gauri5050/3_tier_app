name: CI-CD (Three-Tier App)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}         # e.g., us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} # 12-digit AWS account id
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  IMAGE_TAG: ${{ github.sha }}
  K8S_NAMESPACE: three-tier

permissions:
  contents: read
  id-token: write   # needed for AWS OIDC (no long-lived keys)

jobs:
  # 1) Basic CI: install + build (no tests in repo)
  ci:
    name: Install & Build
    runs-on: self-hosted
    strategy:
      matrix:
        service:
          - name: frontend
            workdir: Application-Code/frontend
            build: "npm run build"
          - name: backend
            workdir: Application-Code/backend
            build: "" # backend has no build step; install only
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "16"   # matches your Dockerfiles (node:14 is used in containers; 16 is safe for CI)

      - name: Install dependencies
        working-directory: ${{ matrix.service.workdir }}
        run: npm ci

      - name: Build (if applicable)
        if: ${{ matrix.service.build != '' }}
        working-directory: ${{ matrix.service.workdir }}
        run: ${{ matrix.service.build }}

  # 2) Build & Push container images to AWS ECR
  docker:
    name: Build & Push Images (ECR)
    runs-on: self-hosted
    needs: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}  # e.g., arn:aws:iam::<acct>:role/GitHubActionsECRRole

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
            | docker login --username AWS --password-stdin "${ECR_REGISTRY}"

      - name: Ensure ECR repositories exist
        run: |
          for REPO in backend frontend; do
            aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$REPO" >/dev/null
          done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./Application-Code/backend
          file: ./Application-Code/backend/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/backend:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./Application-Code/frontend
          file: ./Application-Code/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/frontend:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 3) Deploy to Kubernetes (EKS or other cluster reachable via aws eks update-kubeconfig)
  deploy:
    name: Deploy to Kubernetes
    runs-on: self-hosted
    needs: docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --name "${{ secrets.EKS_CLUSTER_NAME }}" \
            --region "${AWS_REGION}"

      # Apply (creates namespace, svc, ingress, etc. if missing)
      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f Kubernetes-Manifests-file/

      # Update images to the freshly pushed SHAs
      - name: Set images to new tag
        run: |
          kubectl -n "${K8S_NAMESPACE}" set image deployment/api api="${ECR_REGISTRY}/backend:${IMAGE_TAG}"
          kubectl -n "${K8S_NAMESPACE}" set image deployment/frontend frontend="${ECR_REGISTRY}/frontend:${IMAGE_TAG}"

      - name: Wait for rollout (backend)
        run: kubectl -n "${K8S_NAMESPACE}" rollout status deployment/api --timeout=120s

      - name: Wait for rollout (frontend)
        run: kubectl -n "${K8S_NAMESPACE}" rollout status deployment/frontend --timeout=120s
